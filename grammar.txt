// Tokens
{ } ( ) ; == = ! <= & | - ret fn var if while
identifer: [a-zA-Z][a-zA-Z0-9_]^?
number: [+-]^?[0-9][0-9]^?

// Lexemes

<program> 		:= <stmtlist>
<stmtlist>		:= <stmt> ; <stmtlist> | epsilon
<stmt>			:= <func> | <declaration> | <expression> | <while> | <return> | <if>

<declaration>	:= var <assign>
<assign>		:= identifier = <expression>

<func>			:= fn identifier ( <arglist> ) { <stmtlist> }
<funcCall>		:= identifier ( <paramlist> )
<expression>	:= ( <expression> ) | <sub> | <assign> | <funcCall> | identifier | <logic>

<logic>			:= <leq>
<leq>			:= <expression> <= <equals> | <equals>
<equals>		:= <expresion> == <or> | <or>
<or>			:= <expression> | <and> | <and>
<and>			:= <expression> & <not> | <not>
<not>			:= ! <expression>

<arglist>		:= identifier , <arglist> | identifier | epsilon
<paramlist>		:= <expression> , <paramlist> | <expression> | epsilon

<if>			:= if ( <expression> ) { <stmtlist> }
<while>			:= while ( <expression> ) { <stmtlist> }

<sub>			:= <expression> - <sub> | <expression>

// Tokens
{ } ( ) ; == = ! <= & | - ret fn var if
identifer: [a-zA-Z][a-zA-Z0-9_]^?
number: [+-]^?[0-9][0-9]^?
character: '[ANY ONE CHARACTER]' => breaks down into a number

// Lexemes

<program> 		:= <functions>
<functions>		:= <func> <functions> | epsilon

<stmtlist>		:= <stmt> ; <stmtlist> | epsilon
<stmt>			:= <declaration> | <expression> | <return> | <if>

<return>		:= 
<declaration>	:= var <assign>
<assign>		:= identifier = <expression>

<func>			:= fn identifier ( <arglist> ) { <stmtlist> }
<funcCall>		:= identifier ( <paramlist> )
<expression>	:= <math> | <logic> | <identOrNumber> | <funcCall>
<identOrNumber> := identifier | number

<logic>			:= <leq> | <equals> | <or> | <and> | <not>
<leq>			:= <identOrNumber> <= <identOrNumber>
<equals>		:= <identOrNumber> == <identOrNumber>
<or>			:= <identOrNumber> | <identOrNumber>
<and>			:= <identOrNumber> & <identOrNumber>
<not>			:= ! <identOrNumber>

<arglist>		:= identifier , <arglist> | identifier | epsilon
<paramlist>		:= <identOrNumber> , <paramlist> | <identOrNumber> | epsilon

<if>			:= if ( <expression> ) { <stmtlist> }
<while>			:= while ( <expression> ) { <stmtlist> }

<math>			:= <sub> | <add> | <mult> | <div> | <mod>
<sub>			:= <identOrNumber> - <identOrNumber>
<add>			:= <identOrNumber> + <identOrNumber>
<mult>			:= <identOrNumber> * <identOrNumber>
<div>			:= <identOrNumber> / <identOrNumber>
<mod>			:= <identOrNumber> % <identOrNumber>
